# -*- coding: utf-8 -*-
"""Fake News Classifier_using_LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/159KJ5Al6vB8uPKN8fbWZjqu1EVyVEd3F
"""

import pandas as pd

df = pd.read_csv('/content/drive/MyDrive/Google Colab /Neural Networks/RNN/Data Set/FakeNewstrain.csv')
df.head()

df = df.dropna()
df.isnull().values.any()

X = df.drop('label',axis = 1)
X.shape

y = df['label']
y.iloc[54]

X.shape

y.shape

import tensorflow as tf

tf.__version__

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding
from tensorflow.keras.preprocessing.text import one_hot
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout

voc_size = 5000

messages = X.copy()
messages.reset_index(inplace=True)

import nltk
import re
from nltk.corpus import stopwords

nltk.download('stopwords')

#data Preprocessing 

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
corpus = []
for i in range(0, len(messages)):
    print(i)
    review = re.sub('[^a-zA-Z]', " ", messages['title'][i])
    review = review.lower()
    review = review.split()
    
    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]
    review = " ".join(review)
    corpus.append(review)

corpus

onehot_repr = [one_hot(words,voc_size) for words in corpus]
onehot_repr

#Embedding Representation 
sent_length = 20
embedded_docs = pad_sequences(onehot_repr,padding='pre', maxlen = sent_length)
print(embedded_docs)

embedded_docs[0]

#creatingModel 

embedding_vector_features=40
model= Sequential()
model.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))
model.add(Dropout(0.3))
model.add(LSTM(100))
model.add(Dropout(0.3))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
print(model.summary())

len(embedded_docs),y.shape

import numpy as np
X_final=np.array(embedded_docs)
y_final=np.array(y)

X_final.shape,y_final.shape

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X_final,y_final,test_size=0.33, random_state=42)

model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=20,batch_size=64)

y_pred = model.predict_classes(X_test)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test,y_pred)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

model.save('/content/drive/MyDrive/Google Colab /Neural Networks/RNN/Final Project')